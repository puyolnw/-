import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import LoggedLayout from '../../components/layouts/LoggedLayout';
import { teachingSessionApiService } from '../../services/teachingSessionApi';
import { lessonPlanApiService } from '../../services/lessonPlanApi';

interface Subject {
  id: number;
  subject_code: string;
  subject_name: string;
}

interface LessonPlan {
  id: number;
  lesson_plan_name: string;
  subject_id: number;
  subject_name: string;
}

interface TimeSlot {
  id: string;
  label: string;
  startTime: string;
  endTime: string;
  isSelected: boolean;
}

const CreateTeachingSession: React.FC = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [submitting, setSubmitting] = useState(false);
  const [subjects, setSubjects] = useState<Subject[]>([]);
  const [lessonPlans, setLessonPlans] = useState<LessonPlan[]>([]);
  const [subjectLessonPlanCounts, setSubjectLessonPlanCounts] = useState<{[key: number]: number}>({});
  const [selectedSubject, setSelectedSubject] = useState<number | null>(null);
  const [selectedLessonPlan, setSelectedLessonPlan] = useState<number | null>(null);
  const [teachingDate, setTeachingDate] = useState<string>('');
  const [selectedTimeSlots, setSelectedTimeSlots] = useState<TimeSlot[]>([]);
  const [classLevel, setClassLevel] = useState<string>('');
  const [classRoom, setClassRoom] = useState<string>('');
  const [studentCount, setStudentCount] = useState<number | null>(null);
  const [lessonTopic, setLessonTopic] = useState<string>('');
  const [lessonSummary, setLessonSummary] = useState<string>('');
  const [learningOutcomes, setLearningOutcomes] = useState<string>('');
  const [teachingMethodsUsed, setTeachingMethodsUsed] = useState<string>('');
  const [materialsUsed, setMaterialsUsed] = useState<string>('');
  const [studentEngagement, setStudentEngagement] = useState<string>('');
  const [problemsEncountered, setProblemsEncountered] = useState<string>('');
  const [problemSolutions, setProblemSolutions] = useState<string>('');
  const [lessonsLearned, setLessonsLearned] = useState<string>('');
  const [reflection, setReflection] = useState<string>('');
  const [improvementNotes, setImprovementNotes] = useState<string>('');
  const [selfRating, setSelfRating] = useState<number | null>(null);
  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);
  const [error, setError] = useState<string | null>(null);

  // Time slots configuration - moved outside component to avoid recreation
  const initialTimeSlots: TimeSlot[] = [
    { id: '08:00-09:00', label: '08:00 - 09:00', startTime: '08:00', endTime: '09:00', isSelected: false },
    { id: '09:00-10:00', label: '09:00 - 10:00', startTime: '09:00', endTime: '10:00', isSelected: false },
    { id: '10:00-11:00', label: '10:00 - 11:00', startTime: '10:00', endTime: '11:00', isSelected: false },
    { id: '11:00-12:00', label: '11:00 - 12:00', startTime: '11:00', endTime: '12:00', isSelected: false },
    { id: '12:00-13:00', label: '12:00 - 13:00', startTime: '12:00', endTime: '13:00', isSelected: false },
    { id: '13:00-14:00', label: '13:00 - 14:00', startTime: '13:00', endTime: '14:00', isSelected: false },
    { id: '14:00-15:00', label: '14:00 - 15:00', startTime: '14:00', endTime: '15:00', isSelected: false },
    { id: '15:00-16:00', label: '15:00 - 16:00', startTime: '15:00', endTime: '16:00', isSelected: false },
    { id: '16:00-17:00', label: '16:00 - 17:00', startTime: '16:00', endTime: '17:00', isSelected: false },
  ];

  useEffect(() => {
    // Set today's date as default
    const today = new Date().toISOString().split('T')[0];
    setTeachingDate(today);
    const timeSlotsCopy = [...initialTimeSlots];
    console.log('üïê Setting initial time slots:', timeSlotsCopy);
    setSelectedTimeSlots(timeSlotsCopy); // Create a copy to avoid reference issues
    fetchSubjects();
  }, []);

  useEffect(() => {
    if (selectedSubject) {
      fetchLessonPlans(selectedSubject);
    } else {
      setLessonPlans([]);
      setSelectedLessonPlan(null);
    }
  }, [selectedSubject]);

  const fetchSubjects = async () => {
    try {
      setLoading(true);
      const response = await lessonPlanApiService.getSubjects({ limit: 100 });
      if (response.success && response.data) {
        setSubjects(response.data);
        
        // ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏¥‡∏ä‡∏≤
        const counts: {[key: number]: number} = {};
        for (const subject of response.data) {
          try {
            const lessonPlanResponse = await teachingSessionApiService.getAvailableLessonPlans(subject.id);
            if (lessonPlanResponse.success && lessonPlanResponse.data) {
              counts[subject.id] = lessonPlanResponse.data.length;
            } else {
              counts[subject.id] = 0;
            }
          } catch (error) {
            console.error(`Error fetching lesson plans for subject ${subject.id}:`, error);
            counts[subject.id] = 0;
          }
        }
        setSubjectLessonPlanCounts(counts);
      }
    } catch (error) {
      console.error('Error fetching subjects:', error);
      setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡πÑ‡∏î‡πâ');
    } finally {
      setLoading(false);
    }
  };

  const fetchLessonPlans = async (subjectId: number) => {
    try {
      setLoading(true);
      const response = await teachingSessionApiService.getAvailableLessonPlans(subjectId);
      if (response.success && response.data) {
        setLessonPlans(response.data);
      }
    } catch (error) {
      console.error('Error fetching lesson plans:', error);
      setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡πÑ‡∏î‡πâ');
    } finally {
      setLoading(false);
    }
  };

  const handleTimeSlotClick = (slotId: string) => {
    console.log('üïê Time slot clicked:', slotId);
    setSelectedTimeSlots(prev => {
      console.log('üïê Previous slots:', prev);
      const newSlots = prev.map(slot => ({ ...slot })); // Deep copy to avoid mutation
      const slotIndex = newSlots.findIndex(slot => slot.id === slotId);
      
      if (slotIndex === -1) {
        console.log('üïê Slot not found:', slotId);
        return prev;
      }
      
      const slot = newSlots[slotIndex];
      console.log('üïê Found slot:', slot);
      
      // If clicking on the first slot or a slot that's already selected, toggle it
      if (slotIndex === 0 || slot.isSelected) {
        slot.isSelected = !slot.isSelected;
        console.log('üïê Toggled slot:', slot.isSelected);
      } else {
        // Check if previous slot is selected (consecutive selection)
        const prevSlot = newSlots[slotIndex - 1];
        if (prevSlot.isSelected) {
          slot.isSelected = !slot.isSelected;
          console.log('üïê Previous slot selected, toggled:', slot.isSelected);
        } else {
          // If previous slot is not selected, select from this slot onwards
          slot.isSelected = true;
          console.log('üïê Previous slot not selected, selected this slot');
        }
      }
      
      // If unselecting a slot, unselect all subsequent slots
      if (!slot.isSelected) {
        for (let i = slotIndex + 1; i < newSlots.length; i++) {
          newSlots[i].isSelected = false;
        }
        console.log('üïê Unselected subsequent slots');
      }
      
      console.log('üïê New slots:', newSlots);
      return newSlots;
    });
  };

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(event.target.files || []);
    setUploadedFiles(prev => [...prev, ...files]);
  };

  const removeFile = (index: number) => {
    setUploadedFiles(prev => prev.filter((_, i) => i !== index));
  };

  const getSelectedTimeRange = () => {
    const selectedSlots = selectedTimeSlots.filter(slot => slot.isSelected);
    if (selectedSlots.length === 0) return null;
    
    const firstSlot = selectedSlots[0];
    const lastSlot = selectedSlots[selectedSlots.length - 1];
    
    return {
      startTime: firstSlot.startTime,
      endTime: lastSlot.endTime
    };
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!selectedSubject || !selectedLessonPlan || !teachingDate) {
      setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô');
      return;
    }

    const timeRange = getSelectedTimeRange();
    if (!timeRange) {
      setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≠‡∏ô');
      return;
    }

    try {
      setSubmitting(true);
      setError(null);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á teaching session ‡∏Å‡πà‡∏≠‡∏ô
      const response = await teachingSessionApiService.createTeachingSession({
        lesson_plan_id: selectedLessonPlan,
        subject_id: selectedSubject,
        teaching_date: teachingDate,
        start_time: timeRange.startTime,
        end_time: timeRange.endTime,
        class_level: classLevel || undefined,
        class_room: classRoom || undefined,
        student_count: studentCount || undefined,
        lesson_topic: lessonTopic || undefined,
        lesson_summary: lessonSummary || undefined,
        learning_outcomes: learningOutcomes || undefined,
        teaching_methods_used: teachingMethodsUsed || undefined,
        materials_used: materialsUsed || undefined,
        student_engagement: studentEngagement || undefined,
        problems_encountered: problemsEncountered || undefined,
        problem_solutions: problemSolutions || undefined,
        lessons_learned: lessonsLearned || undefined,
        reflection: reflection || undefined,
        improvement_notes: improvementNotes || undefined,
        self_rating: selfRating || undefined,
      });

      if (response.success && response.data) {
        // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á teaching session ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        if (uploadedFiles.length > 0) {
          try {
            const fileUploadResponse = await teachingSessionApiService.uploadFiles(response.data.id, uploadedFiles);
            if (!fileUploadResponse.success) {
              console.warn('Files upload failed:', fileUploadResponse.message);
              // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÅ‡∏Ñ‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            }
          } catch (fileError) {
            console.warn('Files upload error:', fileError);
            // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÅ‡∏Ñ‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
          }
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á popup ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
        navigate('/student/teaching-sessions');
      } else {
        setError(response.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      }
    } catch (error: any) {
      console.error('Error creating teaching session:', error);
      const errorMessage = error.response?.data?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
      setError(errorMessage);
      
      // ‡πÅ‡∏™‡∏î‡∏á popup ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      alert(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô‡πÑ‡∏î‡πâ: ${errorMessage}`);
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <LoggedLayout currentPage="teaching-sessions">
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="bg-white shadow rounded-lg">
            <div className="px-6 py-4 border-b border-gray-200">
              <h1 className="text-2xl font-bold text-gray-900">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà</h1>
              <p className="mt-1 text-sm text-gray-600">‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
            </div>

            <form onSubmit={handleSubmit} className="p-6 space-y-8">
              {error && (
                <div className="bg-red-50 border border-red-200 rounded-md p-4">
                  <div className="flex">
                    <div className="ml-3">
                      <h3 className="text-sm font-medium text-red-800">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h3>
                      <div className="mt-2 text-sm text-red-700">{error}</div>
                    </div>
                  </div>
                </div>
              )}

              {/* Basic Information */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ô <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="date"
                    value={teachingDate}
                    onChange={(e) => setTeachingDate(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ô <span className="text-red-500">*</span>
                  </label>
                  <select
                    value={selectedSubject || ''}
                    onChange={(e) => setSelectedSubject(Number(e.target.value) || null)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                    disabled={loading}
                  >
                    <option value="">{loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...' : '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤'}</option>
                    {subjects.map((subject) => (
                      <option key={subject.id} value={subject.id}>
                        {subject.subject_code} - {subject.subject_name} ({subjectLessonPlanCounts[subject.id] || 0} ‡πÅ‡∏ú‡∏ô)
                      </option>
                    ))}
                  </select>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏Ñ‡∏≤‡∏ö‡∏ô‡∏µ‡πâ <span className="text-red-500">*</span>
                </label>
                <select
                  value={selectedLessonPlan || ''}
                  onChange={(e) => setSelectedLessonPlan(Number(e.target.value) || null)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                  disabled={!selectedSubject}
                >
                  <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô</option>
                  {lessonPlans.map((plan) => (
                    <option key={plan.id} value={plan.id}>
                      {plan.lesson_plan_name}
                    </option>
                  ))}
                </select>
              </div>

              {/* Time Slots Selection */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-4">
                  ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏™‡∏≠‡∏ô <span className="text-red-500">*</span>
                </label>
                <div className="grid grid-cols-3 md:grid-cols-5 gap-3">
                  {selectedTimeSlots.map((slot) => (
                    <button
                      key={slot.id}
                      type="button"
                      onClick={() => handleTimeSlotClick(slot.id)}
                      className={`p-4 rounded-lg border-2 transition-all duration-200 ${
                        slot.isSelected
                          ? 'border-blue-500 bg-blue-50 text-blue-700 shadow-md transform scale-105'
                          : 'border-gray-300 bg-white text-gray-700 hover:border-gray-400 hover:bg-gray-50'
                      }`}
                    >
                      <div className="text-sm font-medium">{slot.label}</div>
                    </button>
                  ))}
                </div>
                <p className="mt-2 text-sm text-gray-600">
                  ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏≤‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ)
                </p>
              </div>

              {/* Class Information */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô
                  </label>
                  <input
                    type="text"
                    value={classLevel}
                    onChange={(e) => setClassLevel(e.target.value)}
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏°.1, ‡∏õ.3"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
                  </label>
                  <input
                    type="text"
                    value={classRoom}
                    onChange={(e) => setClassRoom(e.target.value)}
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏´‡πâ‡∏≠‡∏á 101"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
                  </label>
                  <input
                    type="number"
                    value={studentCount || ''}
                    onChange={(e) => setStudentCount(Number(e.target.value) || null)}
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô 30"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
              </div>

              {/* Lesson Details */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
                </label>
                <input
                  type="text"
                  value={lessonTopic}
                  onChange={(e) => setLessonTopic(e.target.value)}
                  placeholder="‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏≤‡∏ö‡∏ô‡∏µ‡πâ"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
                </label>
                <textarea
                  value={lessonSummary}
                  onChange={(e) => setLessonSummary(e.target.value)}
                  rows={3}
                  placeholder="‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏≤‡∏ö‡∏ô‡∏µ‡πâ"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
                </label>
                <textarea
                  value={learningOutcomes}
                  onChange={(e) => setLearningOutcomes(e.target.value)}
                  rows={3}
                  placeholder="‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏ö‡∏Ñ‡∏≤‡∏ö‡∏ô‡∏µ‡πâ"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
                </label>
                <textarea
                  value={teachingMethodsUsed}
                  onChange={(e) => setTeachingMethodsUsed(e.target.value)}
                  rows={3}
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢, ‡∏Å‡∏≤‡∏£‡∏≠‡∏†‡∏¥‡∏õ‡∏£‡∏≤‡∏¢, ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ‡∏™‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
                </label>
                <textarea
                  value={materialsUsed}
                  onChange={(e) => setMaterialsUsed(e.target.value)}
                  rows={3}
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠, ‡∏™‡πÑ‡∏•‡∏î‡πå, ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô, ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              {/* Reflection Section */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
                </label>
                <textarea
                  value={studentEngagement}
                  onChange={(e) => setStudentEngagement(e.target.value)}
                  rows={3}
                  placeholder="‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
                </label>
                <textarea
                  value={problemsEncountered}
                  onChange={(e) => setProblemsEncountered(e.target.value)}
                  rows={3}
                  placeholder="‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏∏‡∏õ‡∏™‡∏£‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
                </label>
                <textarea
                  value={problemSolutions}
                  onChange={(e) => setProblemSolutions(e.target.value)}
                  rows={3}
                  placeholder="‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
                </label>
                <textarea
                  value={lessonsLearned}
                  onChange={(e) => setLessonsLearned(e.target.value)}
                  rows={3}
                  placeholder="‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏Ñ‡∏¥‡∏î
                </label>
                <textarea
                  value={reflection}
                  onChange={(e) => setReflection(e.target.value)}
                  rows={3}
                  placeholder="‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏Ñ‡∏¥‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
                </label>
                <textarea
                  value={improvementNotes}
                  onChange={(e) => setImprovementNotes(e.target.value)}
                  rows={3}
                  placeholder="‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏ô‡πÄ‡∏≠‡∏á (1-5)
                </label>
                <select
                  value={selfRating || ''}
                  onChange={(e) => setSelfRating(Number(e.target.value) || null)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</option>
                  <option value="1">1 - ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏°‡∏≤‡∏Å</option>
                  <option value="2">2 - ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á</option>
                  <option value="3">3 - ‡∏û‡∏≠‡πÉ‡∏ä‡πâ</option>
                  <option value="4">4 - ‡∏î‡∏µ</option>
                  <option value="5">5 - ‡∏î‡∏µ‡∏°‡∏≤‡∏Å</option>
                </select>
              </div>

              {/* File Upload */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô
                </label>
                <input
                  type="file"
                  multiple
                  accept="image/*,.pdf,.doc,.docx"
                  onChange={handleFileUpload}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
                {uploadedFiles.length > 0 && (
                  <div className="mt-3">
                    <h4 className="text-sm font-medium text-gray-700 mb-2">‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:</h4>
                    <div className="space-y-2">
                      {uploadedFiles.map((file, index) => (
                        <div key={index} className="flex items-center justify-between bg-gray-50 p-2 rounded">
                          <span className="text-sm text-gray-700">{file.name}</span>
                          <button
                            type="button"
                            onClick={() => removeFile(index)}
                            className="text-red-600 hover:text-red-800"
                          >
                            ‡∏•‡∏ö
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>

              {/* Submit Buttons */}
              <div className="flex justify-end space-x-4 pt-6 border-t border-gray-200">
                <button
                  type="button"
                  onClick={() => navigate('/student/teaching-sessions')}
                  className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500"
                >
                  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </button>
                <button
                  type="submit"
                  disabled={submitting}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {submitting ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô'}
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </LoggedLayout>
  );
};

export default CreateTeachingSession;

import React, { createContext, useContext, useState, useEffect } from 'react';
import { useAuth } from '../hooks/useAuth';
import { studentApiService } from '../services/studentApi';

export interface StudentStatus {
  isRegistered: boolean;
  hasCompletionRequest: boolean;
  schoolInfo?: {
    assignment_id: number;
    school_id: string;
    school_name: string;
    enrollment_date: string;
  };
  completionRequestInfo?: {
    id: number;
    status: 'pending' | 'under_review' | 'approved' | 'rejected' | 'revision_required';
    request_date: string;
    approved_date?: string;
    teacher_rating?: number;
    supervisor_rating?: number;
  };
  loading: boolean;
  error: string | null;
}

interface StudentStatusContextType {
  status: StudentStatus;
  refreshStatus: () => void;
}

const StudentStatusContext = createContext<StudentStatusContextType | null>(null);

// Cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• student status
let cachedStatus: StudentStatus | null = null;
let cacheTimestamp: number = 0;
const CACHE_DURATION = 5 * 60 * 1000; // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
let isFetching = false; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ã‡πâ‡∏≥

export const StudentStatusProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { user } = useAuth();
  const [status, setStatus] = useState<StudentStatus>(() => {
    // ‡πÉ‡∏ä‡πâ cache ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    if (cachedStatus && Date.now() - cacheTimestamp < CACHE_DURATION) {
      return { ...cachedStatus, loading: false };
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô student ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ loading: true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const isStudent = user?.role === 'student';
    
    return {
      isRegistered: false,
      hasCompletionRequest: false,
      loading: isStudent, // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô loading ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö student
      error: null,
    };
  });

  const fetchStudentStatus = async () => {
    if (!user || user.role !== 'student') {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà student ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default
      const defaultStatus = {
        isRegistered: false,
        hasCompletionRequest: false,
        loading: false,
        error: null,
      };
      setStatus(defaultStatus);
      return;
    }

    // ‡πÉ‡∏ä‡πâ cache ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    if (cachedStatus && Date.now() - cacheTimestamp < CACHE_DURATION) {
      console.log('üü° StudentStatusProvider - Using cached data');
      setStatus({ ...cachedStatus, loading: false });
      return;
    }

    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ã‡πâ‡∏≥
    if (isFetching) {
      console.log('üü° StudentStatusProvider - Already fetching, skipping...');
      return;
    }

    try {
      isFetching = true;
      // ‡∏ï‡∏±‡πâ‡∏á loading ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ cache
      if (!cachedStatus) {
        setStatus(prev => ({ ...prev, loading: true, error: null }));
      }

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
      console.log('üîÑ StudentStatusProvider - Fetching student status...');
      const response = await studentApiService.getStudentStatus();
      
      if (response.success && response.data) {
        const newStatus = {
          ...response.data,
          loading: false,
          error: null,
        };
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï cache
        cachedStatus = newStatus;
        cacheTimestamp = Date.now();
        
        setStatus(newStatus);
        console.log('üü¢ StudentStatusProvider - Status updated and cached:', {
          isRegistered: newStatus.isRegistered,
          hasCompletionRequest: newStatus.hasCompletionRequest,
          schoolInfo: newStatus.schoolInfo ? `${newStatus.schoolInfo.school_name}` : 'none'
        });
      } else {
        console.log('üî¥ StudentStatusProvider - API response failed:', response);
        throw new Error(response.message || 'Failed to fetch student status');
      }
    } catch (error: any) {
      console.error('üî¥ StudentStatusProvider - Error fetching status:', error);
      setStatus(prev => ({
        ...prev,
        loading: false,
        error: error.message || 'Failed to fetch student status',
      }));
    } finally {
      isFetching = false;
    }
  };

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï loading state ‡πÄ‡∏°‡∏∑‡πà‡∏≠ user ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  useEffect(() => {
    console.log('üîÑ StudentStatusProvider - User role changed:', user?.role);
    console.log('üîÑ StudentStatusProvider - Current status:', status);
    if (user?.role === 'student') {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô student ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ cache ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á loading: true
      if (!cachedStatus || Date.now() - cacheTimestamp >= CACHE_DURATION) {
        console.log('üîÑ StudentStatusProvider - Setting loading: true for student');
        setStatus(prev => ({ ...prev, loading: true }));
      } else {
        console.log('üîÑ StudentStatusProvider - Using cached data for student');
        setStatus(prev => ({ ...prev, loading: false }));
      }
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà student ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á loading: false
      console.log('üîÑ StudentStatusProvider - Setting loading: false for non-student');
      setStatus(prev => ({ ...prev, loading: false }));
    }
  }, [user?.role]);

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠ user ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  useEffect(() => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (user?.id && user?.role === 'student') {
      fetchStudentStatus();
    }
  }, [user?.id, user?.role]); // ‡πÉ‡∏ä‡πâ user.id ‡πÅ‡∏•‡∏∞ user.role ‡πÅ‡∏ó‡∏ô user object

  // Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö refresh status
  const refreshStatus = () => {
    // ‡∏•‡πâ‡∏≤‡∏á cache ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ fetch ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    cachedStatus = null;
    cacheTimestamp = 0;
    isFetching = false;
    fetchStudentStatus();
  };

  return (
    <StudentStatusContext.Provider value={{ status, refreshStatus }}>
      {children}
    </StudentStatusContext.Provider>
  );
};

export const useStudentStatusContext = () => {
  const context = useContext(StudentStatusContext);
  if (!context) {
    throw new Error('useStudentStatusContext must be used within StudentStatusProvider');
  }
  return context;
};

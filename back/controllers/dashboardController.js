const User = require('../models/User');
const TeachingSession = require('../models/TeachingSession');
const LessonPlan = require('../models/LessonPlan');
const CompletionRequest = require('../models/CompletionRequest');
const SchoolInfo = require('../models/SchoolInfo');

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Dashboard ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
const getStudentDashboard = async (req, res) => {
  try {
    const studentId = req.user.id;
    console.log('üîµ Backend - Getting student dashboard for student ID:', studentId);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    const student = await User.findById(studentId);
    if (!student) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤'
      });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    let schoolInfo = null;
    try {
      const schoolResponse = await SchoolInfo.getStudentSchoolInfo(studentId);
      if (schoolResponse) {
        schoolInfo = schoolResponse;
      }
    } catch (error) {
      console.log('üîµ Backend - No school info found:', error.message);
    }

    // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô
    let teachingStats = null;
    if (schoolInfo?.assignment_id) {
      try {
        const statsResponse = await CompletionRequest.getTeachingStats(studentId, schoolInfo.assignment_id);
        if (statsResponse) {
          teachingStats = statsResponse;
        }
      } catch (error) {
        console.log('üîµ Backend - No teaching stats found:', error.message);
      }
    }

    // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô
    let lessonPlanStats = null;
    try {
      const lessonPlanResponse = await LessonPlan.getMyLessonPlans(studentId, { limit: 1 });
      if (lessonPlanResponse && lessonPlanResponse.stats) {
        lessonPlanStats = lessonPlanResponse.stats;
      }
    } catch (error) {
      console.log('üîµ Backend - No lesson plan stats found:', error.message);
    }

    // ‡∏î‡∏∂‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    let recentTeachingSessions = [];
    try {
      const sessionsResponse = await TeachingSession.findByStudentId(studentId, { limit: 5 });
      if (sessionsResponse && sessionsResponse.length > 0) {
        recentTeachingSessions = sessionsResponse || [];
      }
    } catch (error) {
      console.log('üîµ Backend - No recent teaching sessions found:', error.message);
    }

    // ‡∏î‡∏∂‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    let recentLessonPlans = [];
    try {
      const plansResponse = await LessonPlan.findByStudentId(studentId, { limit: 5 });
      if (plansResponse && plansResponse.length > 0) {
        recentLessonPlans = plansResponse || [];
      }
    } catch (error) {
      console.log('üîµ Backend - No recent lesson plans found:', error.message);
    }

    // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
    let completionRequestStatus = null;
    try {
      const requestResponse = await CompletionRequest.findByStudent(studentId);
      if (requestResponse && requestResponse.length > 0) {
        completionRequestStatus = requestResponse[0]; // ‡πÄ‡∏≠‡∏≤‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      }
    } catch (error) {
      console.log('üîµ Backend - No completion request found:', error.message);
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Dashboard
    const dashboardData = {
      student: {
        id: student.id,
        first_name: student.first_name,
        last_name: student.last_name,
        user_id: student.user_id,
        email: student.email
      },
      schoolInfo,
      teachingStats,
      lessonPlanStats,
      recentTeachingSessions,
      recentLessonPlans,
      completionRequestStatus,
      // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°
      summary: {
        totalTeachingSessions: teachingStats?.total_teaching_sessions || 0,
        totalTeachingHours: teachingStats?.total_teaching_hours || 0,
        totalLessonPlans: recentLessonPlans.length || 0,
        isRegistered: !!schoolInfo,
        hasCompletionRequest: !!completionRequestStatus,
        completionRequestStatus: completionRequestStatus?.status || null
      }
    };

    console.log('üîµ Backend - Dashboard data prepared:', {
      hasSchoolInfo: !!schoolInfo,
      hasTeachingStats: !!teachingStats,
      hasLessonPlanStats: !!lessonPlanStats,
      recentSessionsCount: recentTeachingSessions.length,
      recentPlansCount: recentLessonPlans.length,
      hasCompletionRequest: !!completionRequestStatus
    });

    res.json({
      success: true,
      data: dashboardData
    });

  } catch (error) {
    console.error('üîµ Backend - Error getting student dashboard:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Dashboard'
    });
  }
};

module.exports = {
  getStudentDashboard
};
